Question 1: What is the link to your github repository for this lab?
- https://github.com/MichaelLsh/cmput404-lab4

Question 2: After starting a brand new Django application and running the runserver command, what does the browser show you?
- A rocket gif and "The install worked successfully! Congratulations!"

Question 3: After creating the first view within polls, what does the browser show you when navigating to / and to /polls respectively?
- At localhost:8000/ -> Page not found (404). 
- At http://localhost:8000/polls/ -> Hello, world. You're at the polls index.

Question 4: What is a Django migration and why do we need them?
- Migrations are Django's way of propagating changes you make to your models (adding a field, deleting a model, etc.) into your database schema.
- Migrations are helpful because they allow database schemas to evolve as requirements change. They help developers plan, validate, and safely apply schema changes to their environments.

Question 5: What do you see after you log into the Django adminstration site? From a high levle, how do you get custom models to appear in the Django admin page?
- "Site administration" title, one table for "AUTHENTICATION AND AUTHORIZATION", one table for "POLLS", a list for "Recent actions".
- Under the "POLLS" application, we could get the custom models "Questions" and "Choices".
Question 6: What do you see when you go to /polls/38/ in your browser? What about /polls/38/results and /polls/38/vote? What happens when you donâ€™t put a number, and instead use a string? How would you modify the urls.py file to allow arbitrary alphabetic characters?
- /polls/38/ -> You're looking at question 38.
- /polls/38/vote -> You're voting on question 38.
- /polls/38/results -> You're looking at the results of question 38.
- /polls/"38"/ -> Page not found (404)
- By modifying urls.py additional one line of path('specifics/<string:question_id>/', views.detail, name='detail')

Question 7: Why is it a bad idea to hardcode urls into the templates?
- Hard-coding urls makes changing URLs harder, and makes linking to the wrong page easier - so harms maintainability.
- Hard-coding urls will not be able to be automatically updated, instead we have to manually inut them in. 

Question 8: What are the benefits of using Django's generic views over writing views 'the hard way'? When should you use a generic view and when shouldn't you use a generic view?
- Convention over configuration. Django's generic views were developed to ease that pain. They take certain common idioms and patterns found in view development and abstract them so that you can quickly write common views of data without having to write too much code.
- Use generic views for common, reusable logic and avoid for unique or complex logic.